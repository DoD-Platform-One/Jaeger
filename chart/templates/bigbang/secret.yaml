# If we're using an existing elasticsearch instance, 
# Read the data from the appropriate place and put it in this namespace
{{ if .Values.elasticsearch.enabled }}
apiVersion: v1
data:
  ES_USERNAME: {{ .Values.elasticsearch.username | b64enc }}
{{- /*
Use the provided elasticsearch.password value first.

If its not present, then do a dynamic lookup of the secret generated by the elasticserach instance. If
none is configured, then deploy the dependency one (jaeger) in the istio-system namespace.
*/}}
{{- if .Values.elasticsearch.password }}
  ES_PASSWORD: {{ .Values.elasticsearch.password | b64enc }}
{{- else  }}
{{ $secretname := printf "%s-es-elastic-user" ( .Values.elasticsearch.name | default "logging-ek" )}}
  SECRET_NAME: {{ $secretname | b64enc }}
  NAMESPACE: {{ .Values.elasticsearch.namespace | b64enc}}
{{- with lookup "v1" "Secret" (.Values.elasticsearch.namespace | default "logging" )  $secretname }}
  ES_PASSWORD: {{ .data.elastic }}
{{- end }}
{{- end }}
kind: Secret
metadata:
  name: jaeger-secret
  namespace: {{ .Release.Namespace }}
type: Opaque
---
apiVersion: v1
data:
{{ $httpsecretname := printf "%s-es-http-certs-public" ( .Values.elasticsearch.name | default "logging-ek" )}}
{{- with lookup "v1" "Secret" (.Values.elasticsearch.namespace | default "logging" )  $httpsecretname }}
  ca.crt: {{ get .data "ca.crt" }}
{{- end }}
kind: Secret
metadata:
  name: elasticsearch-certificates
  namespace: {{ .Release.Namespace}}
type: Opaque
{{ end }}